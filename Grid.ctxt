#BlueJ class context
comment0.params=x\ y\ room
comment0.target=Grid(int,\ int,\ Room)
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Grid\r\n\ Takes\ the\ first\ room\ to\ be\ added\ to\ grid\ and\ adds\ it\ at\ given\ x,\ y.\ Sets\ an\ exit\ point\ at\r\n\ random.\r\n\ \r\n\ @param\ \ \ x\ \ \ x\ coordinate\ of\ first\ room\r\n\ @param\ \ \ y\ \ \ y\ coordinate\ of\ first\ room\r\n\ @param\ room\ \ first\ room\ to\ be\ added\ to\ the\ grid\ \ \ \ \r\n
comment1.params=room
comment1.target=void\ addRoom(Room)
comment1.text=\r\n\ Add\ a\ given\ room\ to\ the\ grid\ at\ a\ random\ point.\r\n\ \r\n\ @param\ room\ \ room\ to\ be\ added\ to\ grid\r\n
comment2.params=
comment2.target=void\ setExits()
comment2.text=\r\n\ Add\ appropriate\ exits\ to\ each\ point\ on\ the\ grid,\ based\ on\ rooms\ adjacent.\r\n
comment3.params=
comment3.target=java.util.HashMap\ getGrid()
comment3.text=\r\n\ Gets\ the\ grid.\r\n\ \r\n\ @return\ \ a\ HashMap\ containing\ all\ points\ and\ corresponding\ rooms.\r\n
comment4.params=point
comment4.target=void\ freeAdjacentPoints(java.awt.Point)
comment4.text=\r\n\ Used\ internally\ to\ add\ points\ to\ ArrayList\ to\ indicate\ that\ they\ are\ free\ and\ valid,\ so\ that\r\n\ rooms\ can\ be\ added\ at\ these\ points.\r\n\ \r\n\ @param\ point\ the\ given\ point\ whose\ adjacent\ points\ we\ are\ adding\ to\ the\ list.\r\n
numComments=5
